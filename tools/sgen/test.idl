module Test[1] {

    enum TestEnum : u8 {
        FOO,
        BAR,
        BAZ,
    };

    struct Header {
        channel: string;
        topic: string;
        sequence_number: u64;
    };

    struct TestStruct {
        a: list[i8];
        b: boolean;
        c: string;
        d: tuple[string, list[u8]];
        e: union[
            TestEnum, map[i8, i8]
        ];
        f: blob;
    };

    enum WorkerThreadState : u8 {
        IDLE,
        RUNNING,
        STOPPED,
    };

    enum WorkerThreadEvent : u8 {
        START,
        STOP,
    };

    struct TransitionRequest {
        event: WorkerThreadEvent;
    };

    struct TransitionReply {
        old_state: WorkerThreadState;
        new_state: WorkerThreadState;
    };

    struct TickRequest {
        epoch: u64;
    };

    struct TickReply {
    };

    struct WorkerThreadRequest {
        request_id: u64;
        content: union[
            TransitionRequest,
            TickRequest
        ];
    };

    struct WorkerThreadReply {
        request_id: u64;
        content: union[
            TransitionReply,
            TickReply
        ];
    };

};
